@layout UserSignLayout
@page "/signup"
@inherits SignUpBase

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@if (IsLeftOpened)
{
    <h3>SigUp left</h3>

    <EditForm Model="@User" OnValidSubmit="ValidSignUp">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="firstname">First name</label>
            <InputText class="form-control" type="text" id="firstname" @bind-Value="User.FirstName"></InputText>
            <ValidationMessage For="@(() => User.FirstName)" />
        </div>
        <div class="form-group">
            <label for="secondname">Second name</label>
            <InputText class="form-control" type="text" id="secondname" @bind-Value="User.LastName"></InputText>
            <ValidationMessage For="@(() => User.LastName)" />
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <InputText class="form-control" type="email" id="email" @bind-Value="User.Email"></InputText>
            <ValidationMessage For="@(() => User.Email)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText class="form-control" type="password" id="password" @bind-Value="User.Password"></InputText>
            <ValidationMessage For="@(() => User.Password)" />
        </div>
        <div class="form-group">
            <label for="usertype">Type</label>
            <InputRadioGroup class="form-control" id="usertype" @bind-Value="User.UserType">
                <br>
                @foreach (var type in UserTypes)
                    {
                    <InputRadio Value="type.UserTypeId" />@type.UserTypeName
                    <br>
                    }
            </InputRadioGroup>
            <ValidationMessage For="@(() => User.UserType)" />
        </div>

        <button type="submit" class="btn btn-dark">Sign up</button>
    </EditForm>
}
else
{
    <h3>SigUp right</h3>

    <div style="max-width: 400px;">
        <MudCard>
            <MudCardContent>
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />
                    <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                    <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                                  InputType="InputType.Password"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                  RequiredError="Password is required!" />
                    <MudTextField T="string"
                                  Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                                  Validation="@(new Func<string, string>(PasswordMatch))" />
                    <div class="d-flex">
                        <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                            <MudRadio Option="@("Personal")">Personal</MudRadio>
                            <MudRadio Option="@("Professional")">Professional</MudRadio>
                        </MudRadioGroup>
                    </div>
                    <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Class="ml-n2"
                                 Label="I agree that MudBlazor is awesome!" />
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
            </MudCardActions>
        </MudCard>

        <MudPaper Class="pa-4 justify-center my-4 mud-text-align-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
        </MudPaper>

        <MudExpansionPanels>
            <MudExpansionPanel Text="@($"Show Errors ({errors.Length})")">
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    </div>
}

<button @onclick="GoBack">Go back..</button>